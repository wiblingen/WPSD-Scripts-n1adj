#!/bin/bash

# common vars
osName=$( /usr/bin/lsb_release -cs )
if [ -f '/etc/WPSD-release' ]; then
    CALL=$( grep "^Callsign = " /etc/WPSD-release | awk -F' = ' '{print $2}' )
else
    CALL=$( grep "^Callsign = " /etc/pistar-release | awk -F' = ' '{print $2}' )
fi
OS_VER=$( cat /etc/debian_version | sed 's/\..*//')
SUPPORTING_FILES_REPO="https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files"
ssBackendURI="https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/bg-tasks/slipstream-tasks-backend"
bgtBackendURI="https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/bg-tasks/run-bg-tasks"
hostFileURL="https://barrandovhblink.jednoduse.cz/dmrcz"
gitBranch=$(git --work-tree=/var/www/dashboard --git-dir=/var/www/dashboard/.git symbolic-ref --short HEAD)
dashVer=$( git --work-tree=/var/www/dashboard --git-dir=/var/www/dashboard/.git rev-parse --short=10 ${gitBranch} )
uuidStr=$(egrep 'UUID' /etc/WPSD-release | awk {'print $3'})
uaStr="Ver.# ${dashVer} Call:${CALL} UUID:${uuidStr} [${osName}]"
uaStrSF="WPSD-SuppFiles Ver.# ${dashVer} Call:${CALL} UUID:${uuidStr} [${osName}]"
armbian_env_file="/boot/armbianEnv.txt"
rc_local_file="/etc/rc.local"

# Pretty term stuffs ;-)
if [ -t 1 ] || [ -n "$PS1" ] || [ -n "$FORCE_COLOR" ] ; then # terminal and bash call only...
    COL_NC='\e[0m' # No Color
    BOLD='\e[1m'
    REVERSE='\e[7m'
    COL_LIGHT_GREEN='\e[1;32m'
    COL_BRIGHT_GREEN='\e[1;92m'
    COL_LIGHT_RED='\e[31m'
    COL_BRIGHT_RED='\e[1;31m'
    COL_LIGHT_CYAN='\e[1;36m'
    COL_BRIGHT_CYAN='\e[0;96m'
    COL_REG_CYAN='\e[38;5;30m'
    COL_REG_ORANGE='\e[38;5;173m'
    COL_LIGHT_ORANGE='\e[38;5;208m'
    COL_LIGHT_BLUE='\e[1;34m'
    COL_LIGHT_MAGENTA='\e[1;35m'
    COL_REG_MAGENTA='\e[0;95m'
    COL_LIGHT_YELLOW='\e[1;93m'
    COL_REG_YELLOW='\e[93m'
    BULL="${BOLD}\u2022${COL_NC}"
    INFO="${BOLD}[i]${COL_NC}"
    QUES="${BOLD}[?]${COL_NC}"
    NOTE="${BOLD}${COL_LIGHT_YELLOW}[!]${COL_NC}"
    TICK="${BOLD}${COL_LIGHT_GREEN}[✓]${COL_NC}"
    CROSS="${BOLD}${COL_BRIGHT_RED}[✗]${COL_NC}"
    DONE="${BOLD}${COL_LIGHT_GREEN}Done!${COL_NC}"
    COMPL="${BOLD}${COL_LIGHT_GREEN}Complete!${COL_NC}"
else # for web interfaces
    BULL="*"
    INFO="[i]"
    QUES="[?]"
    NOTE="[!]"
    TICK="[✓]"
    CROSS="[✗]"
    DONE="Done!"
    COMPL="Complete!"
fi

# progress spinner
SPINNER_PID=
SPINNER_CHARS="⣾⣽⣻⢿⡿⣟⣯⣷"
spinner() {
    local i=0
    while :; do
        printf "    [${SPINNER_CHARS:$i:1}] Flashing modem - please wait... \r"
        i=$(( (i + 1) % 8 ))
        sleep 0.1
    done
}

isDVmegaCast() { #obvs
  if [ -d "/opt/cast/.git" ]; then
    echo "true"
  else
    echo "false"
  fi
}

# connectivity check & version cacher
conn_check() {
    ProgVer="WPSD-HostFileUpdater v4.x ConnectivityCheck & Version Cacher"
    connection_established=false

    # Remote version file URL
    remote_version_url="${hostFileURL}/.WPSD_remote_version"
    ini_file="/etc/.WPSD_remote_version"
    temp_file="$(mktemp)"

    # Fetch the remote version file
    if curl --silent --fail --output "$temp_file" -A "${ProgVer} ${uaStr}" "$remote_version_url"; then
        connection_established=true
        mv "$temp_file" "$ini_file"
        chmod 644 "$ini_file"
    else
        rm -f "$temp_file"
    fi
}

# Function to check if any network interface has an IP address
interface_has_ip() {
  local interfaces=($(ip -o addr show | awk '{print $2}'))

  for interface in "${interfaces[@]}"; do
    if [[ $interface != "lo" ]]; then
      if ip addr show dev $interface | grep -q 'inet '; then
        return 0
      fi
    fi
  done

  return 1
}

# function to return routable IP:
interface_get_ip() {
  local interfaces=($(ip -o addr show | awk '{print $2}'))

  for interface in "${interfaces[@]}"; do
    if [[ $interface != "lo" ]]; then
      local ip_address=$(ip addr show dev $interface | awk '/inet / {print $2}' | cut -d'/' -f1)
      if [ -n "$ip_address" ]; then
        echo $ip_address
        return 0
      fi
    fi
  done

  return 1
}

# clean up the MMDVM log when modes are paused mid-TX. This eliminaes the
# "infinite TX status" when the radio really isn't TXing.
function process_log_file() {
  current_date=$(date -u "+%Y-%m-%d")
  file_name="/var/log/pi-star/MMDVM-${current_date}.log"

  if [ -e "$file_name" ]; then
    # Find the last line with "received network end of" in the file
    last_line_end_of=$(grep -n "received network end of" "$file_name" | tail -n 1 | cut -d: -f1)

    # If "received network end of" is found, delete lines with "received network voice header" or "received network data from" after that line
    if [ -n "$last_line_end_of" ]; then
      sed -i "${last_line_end_of},\$ {/received network voice header\|received network data from\|received network header from\|received RF end of/d;}" "$file_name"
    fi
  else
    :
  fi
}

function purge_log_files() { #obvs
    wpsd-services fullstop > /dev/null 2>&1
    rm -rf /var/log/pi-star/* > /dev/null 2>&1
    wpsd-services start > /dev/null 2>&1
}

# check if user already has firewall disabled, and if so, ensure it's kept that way.
if grep -q LOGNDROP /etc/iptables.rules; then
    fwState="enabled"
else
    fwState="disabled"
fi

